{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","_jsx","className","concat","mode","children","_jsxs","href","title","type","id","aboutText","role","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","_Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleClearClick","handleCopy","navigator","clipboard","writeText","handleExtraSpaces","split","join","filter","element","defaultProps","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","Date","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0b198278.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n                        </li>\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\"  type=\"checkbox\" role='switch' id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{ \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value) \r\n    }\r\n\r\n    // Credits: A\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text); \r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    // Credits: Coding Wala\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(''); \r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            <h1 className='mb-4'>{props.heading}</h1>\r\n            <div className=\"mb-3\"> \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\n// import About from './components/About';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route\r\n// } from \"react-router-dom\";\r\n\r\n \r\nfunction App() {\r\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type)=>{\r\n      setAlert({\r\n        msg: message,\r\n        type: type\r\n      })\r\n      setTimeout(() => {\r\n          setAlert(null);\r\n      }, 1500);\r\n  }\r\n\r\n  const toggleMode = ()=>{\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n    {/* <Router> */}\r\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} key={new Date()} />\r\n    <Alert alert={alert}/>\r\n    <div className=\"container my-3\">\r\n    {/* <Switch> */}\r\n    {/* /users --> Component 1\r\n        /users/home --> Component 2 */}\r\n          {/* <Route exact path=\"/about\">\r\n            <About mode={mode} />\r\n          </Route>\r\n          <Route exact path=\"/\"> */}\r\n            <TextForm showAlert={showAlert} heading=\"Try TextUtils - word counter, character counter, remove extra spaces\" mode={mode}/>\r\n          {/* </Route>\r\n    </Switch> */}\r\n    </div>\r\n    {/* </Router> */}\r\n    </> \r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}